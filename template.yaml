AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for hubspot_deals_export


Parameters:
  Environment:
    Description: Environment type.
    Default: dev
    Type: String
    AllowedValues:
      - prod
      - dev
  SecretName:
    Default: blend_ode/dev
    Type: String
  SfDatabase:
    Default: RESOURCE_REQUEST_TOOL
    Type: String
  SfRole:
    Default: SNOWFLAKE_RESOURCE_REQUEST_ADMIN
    Type: String
  SfSchema:
    Default: PRICING_TOOL_SANDBOX_HYBRID
    Type: String
  SfWarehouse:
    Default: POWERHOUSE
    Type: String
  S3BucketName:
    Default: hubspot-deals-info
    Type: String

Resources:

  # SQS #
  HubspotWebhookMessages:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: 'HubspotWebhookMessages'
      VisibilityTimeout: 900

  CustomLambdaExecuteRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      Policies:
        - PolicyName: CustomLambdaExecute
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'

  HubspotDealsExportToSnowflake:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'hubspot-snowflake-export'
      Handler: hubspot_snowflake_export.handler.lambda_handler
      Runtime: python3.12
      Timeout: 900
      MemorySize: 1024
      Role: !GetAtt CustomLambdaExecuteRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          HUBSPOT_API_KEY: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:HUBSPOT_TOKEN}}"
          SF_ACCOUNT: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:SF_ACCOUNT}}"
          SF_DATABASE: !Ref SfDatabase
          SF_PASSWORD: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:SF_PASSWORD}}"
          SF_ROLE: !Ref SfRole
          SF_SCHEMA: !Ref SfSchema
          SF_USER: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:SF_USER}}"
          SF_WAREHOUSE: !Ref SfWarehouse
          AWS_ACCOUNT_ID: !Sub "${AWS::AccountId}"
          S3_BUCKET_NAME: !Ref S3BucketName
          API_AUTH_KEY: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:HUBSPOT_SYNC_API_KEY}}"
          RRT_TENANT_ID: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:RRT_TENANT_ID}}"
          RRT_CLIENT_ID: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:RRT_CLIENT_ID}}"
          RRT_CLIENT_SECRET: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:RRT_CLIENT_SECRET}}"
          SYNC_ALERT_TO_EMAILS: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:SYNC_ALERT_TO_EMAILS}}"
          SYNC_ALERT_CC_EMAILS: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:SYNC_ALERT_CC_EMAILS}}"
          HUBSPOT_SYNC_QUEUE: !Ref HubspotWebhookMessages
          ENV_: !Ref Environment
      Events:
        SingleDealUpdate:
          Type: Api
          Properties:
            RestApiId: !Ref SyncHubspotDealsAPI
            Path: /sync/deal/{dealId}
            Method: post
        SyncAllDeal:
          Type: Api
          Properties:
            RestApiId: !Ref SyncHubspotDealsAPI
            Path: /sync/deals
            Method: post
        HubspotSyncWebhook:
          Type: Api
          Properties:
            RestApiId: !Ref SyncHubspotDealsAPI
            Path: /hubspot/deals/sync
            Method: post

  HubspotWebhookSync:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'hubspot-webhook-sync'
      Handler: hubspot_snowflake_export.sqs_handler.lambda_handler
      Runtime: python3.12
      Timeout: 900
      MemorySize: 1024
      Role:  !GetAtt CustomLambdaExecuteRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          HUBSPOT_API_KEY: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:HUBSPOT_TOKEN}}"
          SF_ACCOUNT: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:SF_ACCOUNT}}"
          SF_DATABASE: !Ref SfDatabase
          SF_PASSWORD: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:SF_PASSWORD}}"
          SF_ROLE: !Ref SfRole
          SF_SCHEMA: !Ref SfSchema
          SF_USER: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:SF_USER}}"
          SF_WAREHOUSE: !Ref SfWarehouse
          AWS_ACCOUNT_ID: !Sub "${AWS::AccountId}"
          S3_BUCKET_NAME: !Ref S3BucketName
          API_AUTH_KEY: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:HUBSPOT_SYNC_API_KEY}}"
          RRT_TENANT_ID: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:RRT_TENANT_ID}}"
          RRT_CLIENT_ID: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:RRT_CLIENT_ID}}"
          RRT_CLIENT_SECRET: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:RRT_CLIENT_SECRET}}"
          SYNC_ALERT_TO_EMAILS: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:SYNC_ALERT_TO_EMAILS}}"
          SYNC_ALERT_CC_EMAILS: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:SYNC_ALERT_CC_EMAILS}}"
          HUBSPOT_SYNC_QUEUE: !Ref HubspotWebhookMessages
          ENV_: !Ref Environment
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt HubspotWebhookMessages.Arn
            BatchSize: 1000
            MaximumBatchingWindowInSeconds: 90
            Enabled: true
            ScalingConfig:
              MaximumConcurrency: 2

  #Rule - to run cron job#
  HubspotDealsExportScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: 'cron(0/5 10-3 ? * * *)'
      State: 'ENABLED'
      Name: 'HubspotDealsExportScheduleRule'
      Targets:
        - Arn: !GetAtt HubspotDealsExportToSnowflake.Arn
          Id: "ScheduleJobForHubspotDealsExport"
          Input: '{"event": "SCHEDULE_FETCH"}'

  #Lambda Invoke Permission - to run cron job#
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref HubspotDealsExportToSnowflake
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt HubspotDealsExportScheduleRule.Arn


  SyncHubspotDealsAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: SyncHubspotDealsAPI
      StageName: !Ref Environment
      EndpointConfiguration:
        Type: REGIONAL

  LambdaInvokePermissionForAPIGW:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref HubspotDealsExportToSnowflake
      Principal: 'apigateway.amazonaws.com'